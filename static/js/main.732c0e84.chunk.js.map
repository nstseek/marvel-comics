{"version":3,"sources":["components/Comic/Comic.tsx","utils/comic-utils.ts","components/ComicDetails/ComicDetails.tsx","components/ComicList/ComicList.tsx","components/Loading/Loading.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Comic","comic","addComic","removeComic","openComic","selected","className","onClick","type","checked","event","stopPropagation","onChange","id","src","thumbnail","path","extension","alt","title","getCreators","creators","items","map","creator","name","join","getCharacters","characters","length","character","getDetails","detailsInd","urls","findIndex","url","getPublishDate","pubInd","dates","date","moment","format","Field","label","content","ComicDetails","close","onBackdropClick","description","prices","price","toLocaleString","series","target","rel","href","cancelMessage","ComicList","useState","comics","setComics","query","setQuery","selectedComics","setSelectedComics","setOpenComic","uiCtx","useContext","ReactUIContext","latestFetch","useRef","value","page","setPage","totalPages","setTotalPages","useEffect","fetchComics","current","cancel","a","axios","CancelToken","source","pushLoading","params","apikey","formatType","offset","limit","titleStartsWith","get","cancelToken","token","response","data","Math","ceil","total","message","addModal","desc","popLoading","buildEmail","getThumbnail","placeholder","count","results","selectedComic","previousState","filter","state","loading","emailComics","subject","encodeURIComponent","body","aEl","document","createElement","click","Loading","particlesParam","particles","number","density","enable","value_area","opacity","random","anim","speed","opacity_min","sync","size","size_min","line_linked","move","direction","interactivity","detect_on","events","onhover","mode","onclick","resize","modes","repulse","distance","duration","push","particles_nb","quantity","retina_detect","App","uiRootCtx","useRootContext","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.732c0e84.chunk.js","sourcesContent":["import React from 'react';\nimport { Comic as ComicModel } from '../../typings/api';\nimport './Comic.scss';\n\ninterface Props {\n  comic: ComicModel;\n  addComic(comic: ComicModel);\n  removeComic(id: number);\n  openComic(comic: ComicModel);\n  selected: boolean;\n}\n\n/**\n * This component is a small card that shows the basic info for the comic provided, allowing the user to click on it, triggering an event that can show more details\n * @param comic - The comic to be displayed\n * @param addComic - The function to be called when the comic gets checked\n * @param removeComic - The function to be called when the comic gets unchecked\n * @param openComic - The function to be called when the comic gets clicked\n * @param selected - Indicates if this comic is selected\n */\nconst Comic: React.FC<Props> = ({\n  comic,\n  addComic,\n  removeComic,\n  openComic,\n  selected\n}) => (\n  <div className='Comic' onClick={() => openComic(comic)}>\n    <input\n      className='comic-checkbox'\n      type='checkbox'\n      checked={selected}\n      onClick={(event) => event.stopPropagation()}\n      onChange={() => {\n        if (selected) {\n          removeComic(comic.id);\n        } else {\n          addComic(comic);\n        }\n      }}\n    />\n    <img\n      className='comic-thumb'\n      src={comic.thumbnail.path + '.' + comic.thumbnail.extension}\n      alt={comic.title + ' image'}\n    />\n    <h3 className='comic-title'>{comic.title}</h3>\n  </div>\n);\n\nexport default Comic;\n","import moment from 'moment';\n\n/**\n * This function returns the creators of the comic separated by a comma\n * @param comic - The comic to be analyzed\n */\nexport const getCreators = (comic) =>\n  comic.creators.items.map((creator) => creator.name).join(', ');\n\n/**\n * This function returns the characters of the comic separated by a comma\n * @param comic - The comic to be analyzed\n */\nexport const getCharacters = (comic) =>\n  comic.characters.items.length\n    ? comic.characters.items.map((character) => character.name).join(', ')\n    : '';\n\n/**\n * This function returns the URL for the thumbnail of the comic\n * @param comic - The comic to be analyzed\n */\nexport const getThumbnail = (comic) =>\n  comic.thumbnail.path + '.' + comic.thumbnail.extension;\n\n/**\n * This function returns the details of the comic\n * @param comic - The comic to be analyzed\n */\nexport const getDetails = (comic) => {\n  const detailsInd = comic.urls.findIndex((url) => url.type === 'detail');\n  if (detailsInd >= 0) {\n    return comic.urls[detailsInd].url;\n  }\n};\n\n/**\n * This function returns the publish date of the comic\n * @param comic - The comic to be analyzed\n */\nexport const getPublishDate = (comic) => {\n  const pubInd = comic.dates.findIndex((date) => date.type === 'onsaleDate');\n  if (pubInd >= 0) {\n    return moment(comic.dates[pubInd].date).format('LL');\n  }\n};\n","import { Backdrop } from '@nstseek/react-ui/components';\nimport React from 'react';\nimport { Comic } from 'typings/api';\nimport {\n  getCharacters,\n  getCreators,\n  getDetails,\n  getPublishDate\n} from 'utils/comic-utils';\nimport './ComicDetails.scss';\n\ninterface Props {\n  comic: Comic;\n  close();\n}\n\nconst Field = (label, content) => (\n  <p className='field'>\n    <span className='title'>{label}</span>\n    {content}\n  </p>\n);\n\n/**\n * This component provides more information about a comic opening in a popup so the user can see a bigger cover, the title, characters, creators and more\n * @param comic - The comic to be displayed\n * @param close - The function to be called when a close event is emitted\n */\nconst ComicDetails: React.FC<Props> = ({ comic, close }) => (\n  <Backdrop onBackdropClick={close}>\n    <div className='ComicDetails'>\n      <div className='comic-content'>\n        <img src={comic.thumbnail.path + '.' + comic.thumbnail.extension}></img>\n        <h3 className='comic-title'>{comic.title}</h3>\n        {Field('Criadores: ', getCreators(comic))}\n        {comic.description ? Field('Descrição: ', comic.description) : null}\n        {getCharacters(comic)\n          ? Field('Personagens: ', getCharacters(comic))\n          : null}\n        {Field(\n          'Preço: ',\n          comic.prices?.[0]?.price.toLocaleString('pt-br') + ' dólares'\n        )}\n        {Field('Série: ', comic.series.name)}\n        {Field('Data de publicação: ', getPublishDate(comic))}\n        {getDetails(comic) ? (\n          <a target='_blank' rel='noreferrer' href={getDetails(comic)}>\n            Clique aqui para ver mais detalhes\n          </a>\n        ) : null}\n      </div>\n      <button className='close-details' onClick={close}>\n        Fechar\n      </button>\n    </div>\n  </Backdrop>\n);\n\nexport default ComicDetails;\n","import { ReactUIContext } from '@nstseek/react-ui/context';\nimport axios, { CancelTokenSource } from 'axios';\nimport Comic from 'components/Comic/Comic';\nimport ComicDetails from 'components/ComicDetails/ComicDetails';\nimport React, { useContext, useEffect, useRef, useState } from 'react';\nimport { Comic as ComicModel, ComicParams, ComicResponse } from 'typings/api';\nimport {\n  getThumbnail,\n  getCreators,\n  getCharacters,\n  getDetails,\n  getPublishDate\n} from 'utils/comic-utils';\nimport './ComicList.scss';\n\nconst cancelMessage = 'Cancelled intentionally';\n\n/**\n * This component holds all the logic to fetch and search for comics\n * It also holds the logic for selecting comics and building an email to be sent by the final user\n */\nconst ComicList: React.FC = () => {\n  const [comics, setComics] = useState<ComicResponse>(null);\n  const [query, setQuery] = useState('');\n  const [selectedComics, setSelectedComics] = useState<ComicModel[]>([]);\n  const [openComic, setOpenComic] = useState<ComicModel>(null);\n  const uiCtx = useContext(ReactUIContext);\n  const latestFetch = useRef<CancelTokenSource>(null);\n  const pageSize = 20;\n  const [page, setPage] = useState({ value: 1 });\n  const [totalPages, setTotalPages] = useState(null);\n\n  useEffect(() => {\n    fetchComics();\n    return () => latestFetch.current.cancel(cancelMessage);\n  }, [page]);\n\n  useEffect(() => {\n    setPage({ value: 1 });\n  }, [query]);\n\n  const fetchComics = async () => {\n    latestFetch.current = axios.CancelToken.source();\n    uiCtx.pushLoading();\n    try {\n      const params: ComicParams = {\n        apikey: '2039859d947cf31356a41e66a4dcb442',\n        format: 'comic',\n        formatType: 'comic',\n        offset: (page.value - 1) * pageSize,\n        limit: pageSize,\n        ...(query ? { titleStartsWith: query } : null)\n      };\n      const response = await axios.get<ComicResponse>(\n        'https://gateway.marvel.com/v1/public/comics',\n        {\n          params,\n          cancelToken: latestFetch.current.token\n        }\n      );\n      setComics(response.data);\n      setTotalPages(Math.ceil(response.data.data.total / pageSize));\n    } catch (err) {\n      if (err?.message !== cancelMessage) {\n        uiCtx.addModal({\n          desc: 'Erro ao atualizar lista de comics',\n          title: 'Erro na API',\n          type: 'error'\n        });\n      }\n    } finally {\n      uiCtx.popLoading();\n    }\n  };\n\n  const buildEmail = (comic: ComicModel): [string, string] => {\n    const subject = 'Comic - ' + comic.title;\n    const body = `Título: ${comic.title}\\n\\nImagem: ${getThumbnail(\n      comic\n    )}\\n\\nCriadores: ${getCreators(comic)}${\n      comic.description ? '\\n\\nDescrição: ' + comic.description : ''\n    }\\n\\nPersonagens: ${getCharacters(\n      comic\n    )}\\n\\nPreço: ${comic.prices?.[0]?.price.toLocaleString(\n      'pt-br'\n    )} dólares\\n\\nSérie: ${comic.series.name}${\n      getDetails(comic) ? '\\n\\nDetalhes: ' + getDetails(comic) : ''\n    }${\n      getPublishDate(comic)\n        ? '\\n\\nData de publicação: ' + getPublishDate(comic)\n        : ''\n    }`;\n    return [subject, body];\n  };\n\n  const sendEmail = () => {\n    const emailComics = selectedComics.map(buildEmail);\n    const subject = encodeURIComponent(\n      emailComics.map(([subject]) => subject).join(' | ')\n    );\n    const body =\n      encodeURIComponent(\n        emailComics\n          .map(([, body]) => body)\n          .join(\n            ' \\n\\n============================================================================\\n\\n '\n          )\n      ) + '\\n';\n    /* \n      Não é possível colocar a imagem diretamente no email usando o protocolo mailto:\n\n      O protocolo mailto: não permite que você defina o MIME type do conteúdo, ele sempre será plain/text.\n\n      Para poder fazer o embed da imagem direto você precisaria definir o MIME type do corpo da mensagem como text/html\n      e então utilizar um elemento <img> no corpo da mensagem colocando a URL da imagem no src do elemento.\n\n      Como plain/text, o elemento será considerado como texto normal e você terá um <img> em texto indesejado no corpo do email.\n\n      Sendo assim, coloquei apenas o link para a imagem no email, você pode ler mais a respeito no link abaixo:\n      https://stackoverflow.com/questions/35033785/gmail-mailto-with-images-and-links\n\n      Você também pode ler mais sobre MIME types aqui:\n      https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\n    */\n    const aEl: HTMLAnchorElement = document.createElement('a');\n    aEl.target = '_blank';\n    aEl.href = `mailto:?subject=${subject}&body=${body}&Content-type=text/html`;\n    aEl.click();\n  };\n\n  return (\n    <div className='ComicList'>\n      {openComic ? (\n        <ComicDetails comic={openComic} close={() => setOpenComic(null)} />\n      ) : null}\n      <div className='query'>\n        <input\n          type='text'\n          value={query}\n          onChange={(event) => setQuery(event.target.value)}\n          placeholder='Digite um título para pesquisar quadrinhos...'\n        />\n      </div>\n      <div className={'list' + (comics?.data?.count ? ' has-data' : '')}>\n        {comics?.data?.count ? (\n          <>\n            {comics.data.results.map((comic) => (\n              <Comic\n                key={comic.id}\n                comic={comic}\n                openComic={(comic) => setOpenComic(comic)}\n                selected={\n                  selectedComics.findIndex(\n                    (selectedComic) => selectedComic.id === comic.id\n                  ) >= 0\n                }\n                addComic={(comic) =>\n                  setSelectedComics((previousState) => [\n                    ...previousState,\n                    comic\n                  ])\n                }\n                removeComic={(id) => {\n                  setSelectedComics((previousState) =>\n                    previousState.filter((comic) => comic.id !== id)\n                  );\n                }}\n              />\n            ))}\n          </>\n        ) : (\n          <h3>\n            {uiCtx.state.loading.length\n              ? 'Carregando...'\n              : 'Nenhum resultado encontrado.'}\n          </h3>\n        )}\n      </div>\n      {comics?.data ? (\n        <h5 className='result-info'>\n          Mostrando de {comics.data.offset + 1} a{' '}\n          {comics.data.offset + comics.data.count} de um total de{' '}\n          {comics.data.total} - {comics.data.limit} por página - {totalPages}{' '}\n          páginas\n        </h5>\n      ) : null}\n      <div className='controls'>\n        {comics?.data ? (\n          <div className='navigators'>\n            <button\n              className='page-switcher'\n              onClick={() =>\n                setPage((previousState) => {\n                  if (previousState.value === 1) {\n                    return previousState;\n                  } else {\n                    return { value: previousState.value - 1 };\n                  }\n                })\n              }>\n              {'<'}\n            </button>\n            <button\n              className='page-switcher'\n              onClick={() =>\n                setPage((previousState) => {\n                  if (previousState === totalPages) {\n                    return previousState;\n                  } else {\n                    return { value: previousState.value + 1 };\n                  }\n                })\n              }>\n              {'>'}\n            </button>\n          </div>\n        ) : null}\n        {selectedComics.length ? (\n          <div className='mail-buttons'>\n            <button onClick={sendEmail}>Enviar email</button>\n            <button onClick={() => setSelectedComics([])}>\n              Desmarcar todos\n            </button>\n          </div>\n        ) : null}\n      </div>\n    </div>\n  );\n};\n\nexport default ComicList;\n","import { ReactUIContext } from '@nstseek/react-ui/context';\nimport React, { useContext } from 'react';\nimport './Loading.scss';\n\n/**\n * This component implements a simple loading indicator at the bottom-right of the page, just to give a UI feedback to the final user\n */\nconst Loading: React.FC = () => {\n  const uiCtx = useContext(ReactUIContext);\n\n  return uiCtx.state.loading.length ? (\n    <div className='Loading'>\n      <i id='loading' className='fas fa-spinner' />\n    </div>\n  ) : null;\n};\n\nexport default Loading;\n","import React from 'react';\nimport Particles, { IParticlesParams } from 'react-particles-js';\nimport './App.scss';\nimport { ReactUIContext, useRootContext } from '@nstseek/react-ui/context';\nimport { ModalWarning } from '@nstseek/react-ui/components';\nimport ComicList from 'components/ComicList/ComicList';\nimport Loading from 'components/Loading/Loading';\nimport 'moment/locale/pt-br';\n\n/**\n * Holds the configuration for the particle background that you can see in the application\n */\nconst particlesParam: IParticlesParams = {\n  particles: {\n    number: {\n      value: 150,\n      density: {\n        enable: false,\n        value_area: 800\n      }\n    },\n    opacity: {\n      value: 0.5,\n      random: true,\n      anim: {\n        enable: true,\n        speed: 1,\n        opacity_min: 0.1,\n        sync: false\n      }\n    },\n    size: {\n      value: 1,\n      random: true,\n      anim: {\n        enable: false,\n        speed: 10,\n        size_min: 0.1,\n        sync: false\n      }\n    },\n    line_linked: {\n      enable: false\n    },\n    move: {\n      enable: true,\n      speed: 1,\n      direction: 'none',\n      random: true\n    }\n  },\n  interactivity: {\n    detect_on: 'canvas',\n    events: {\n      onhover: {\n        enable: true,\n        mode: 'repulse'\n      },\n      onclick: {\n        enable: true,\n        mode: 'push'\n      },\n      resize: true\n    },\n    modes: {\n      repulse: {\n        distance: 50,\n        duration: 1\n      },\n      push: {\n        particles_nb: 1,\n        quantity: 5\n      }\n    }\n  },\n  retina_detect: true\n};\n\nconst App: React.FC = () => {\n  const uiRootCtx = useRootContext();\n\n  return (\n    <ReactUIContext.Provider value={uiRootCtx}>\n      <ModalWarning />\n      <Loading />\n      <div className='App'>\n        <Particles className='particles' params={particlesParam} />\n        <div className='main-container'>\n          <ComicList />\n        </div>\n      </div>\n    </ReactUIContext.Provider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport './styles/ui.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}